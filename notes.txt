Shell Script
	- starts with #! followed by the language(shell)
	- make it executable (chmod 755 or chmod a+x)

	Variables:
		Declaration
		-----------
		VARIABLE_NAME=<VALUE>	# There must not be spaces at all.

	Commands:
		file ARG...		# man - file(1), magic(5)
		which ARG...

		test CONDITION(S)	# man test
		[ CONDITION(S) ]

		GREP
		====
		syntax:
			grep [-i] [-v] [-A <num-of-lines-after] [-B <num-of-lines-before>] [-n] {[-e] PATTERN}... [[-r] [<PATHNAME>]]
		
		grep -i '\<a.*' /etc/fstab
		
		

Shell Features(man bash):
	1. Meta-characters:
		# 	- hash is used for comments
		;	- command separator
		' '	- space is an argument/option separator
	2. Quoting:
		\	- ignore the next character
		''	- single quotes. EVERYTHING is ignored within single quotes.
		""	- double quotes. Almost Everything is ignored. Substitutions will be interpreted by the shell first.

	3. Substitutions:
		Variables - Preceed a variable name with $.
		Command   - $(CMD) OR `CMD`

	4. I/O Redirection:
		>|>> FILENAME		- redirect output to FILENAME
		2>|2>> FILENAME		- redirect errors to FILENAME
		>&2			- redirect output to error stream. Treat as error msg.
		&> /dev/null		- throw away all output/error.

	5. Selection
		if CONDITION; then
			COMMAND...
		[[elif CONDITION; then
			COMMAND...]...
		else
			COMMAND...]
		fi

		CMD1 && CMD2 || CMD3	- do CMD2 if CMD1 succeeds, CMD3 if CMD1 fails.

	6. Iteration
		for VARIABLE in LIST; do
			COMMAND...
		done

	7. Regular Expressions (man 7 regex)
		atom	= a single character or regular expression within bounds().
			Eg.
				x is an atom
				(abc.*\.doc?) is also an atom
		
		1. Literal Character - a, b, c
			abc = exact match abc
		2. Metacharacter/Wildcard
			. - any single character (exactly 1 character)
				a.b - matches a follow by any 1 character and then b
				    - axb
				    - a.b
				    - a0b
			[] - any 1 character within boxed brackets.
				[abc] - matches a or b or c
				[abc]at - matches aat, bat or cat
				[^abc] - any single character except a or b or c. either use ^ or !
				[a-zA-Z0-9] 
			<CHARACTER CLASSES>
				[:space:] space or tab
				[:upper:] = [A-Z]
				[:lower:] = [a-z]
				etc...
		3. Modifiers (symbols after atom)
			* - zero or more of previous atom 
				a* - nothing or a or aa or aaa or aaaa or ...
				a.*  - a follow by anything (file globbing a*)
				c[ao]*t - cat, cot, ct, caat, caot, coat, coooot, caaaaoooot
				c(ao)*t - ct, caot, caoaot, caoaoaot
			+ - one or more of previous atom
			? - zero or one of previous atom
				A1?2 - A2 or A12
				https? - http or https
				b(oa)?t - bt or boat
			{x} - x(digit) of previous atom
			{x,} - x or more of previous atom
			{x,y} - x to y of previous atom
			{,y} - 0 to y of previous atom
				w{3} - www
				[0-9]{3} - 3 digit number
				[:digit:]{6}-[:digit:]{2}-[:digit:]{4}  - malaysian IC number
				[:digit:]{1,3}
		
		4. Anchors (symbols before/after atom)
			(before)
			^  - line begins with
			\< - word begins with
			(after)
			\> - word ends with
			$  - line ends with
		
				^The - matches The or Thesis on the beginning of the line.
				ing\.$ - Line ends with "ing."
				\<cat - word starts with c. Followed by the literal characters "at"
				cat\> - word ends with t. With the literal character ca before it.
				\<b(oa)*t\> - bt, boat, boaoat, boaoaoat, ...
				^dog$ - matches exactly a word dog on a single line
		
			Eg.
				This is a 4 paragraph example for the usage of regular expression. That is up to you to guess how it is done. Testing anything that starts with th is quite hard to do as well as ending with th. th is not Th and TH is not th.
		
				Second paragraph starts with some text that will last for a lifetime. When is the 3rd paragraph going to show up?
		
				Finally, we've reached the third paragraph in this example. The keyword is Th.
		
		This is the last line in the example for the paragraph demo.


Chap 2
======
	At
	==
		PACKAGE: at
		SERVICE: atd

		list   => at -l = atq = at -c JOB
		remove => at -r JOB  = atrm
		create => at TIME [< SCRIPT]	# if no script is provided, key in commands and end with CTRL-D


	CRONTAB
	=======
		PACKAGE: cronie			# yum whatprovides crond OR rpm -q `which crond`
		SERVICE: crond

		crontab -l|r|e [USER]		# list, remove all, edit
		syntax of file:
			minute	hr	day-of-month	month	day-of-week	CMD
			0-59	0-23	1-31		1-12	0-7		...

		REGULATE USAGE:
			/etc/cron.{allow,deny}

		SYSTEM CRON JOBS:
			/etc/crontab
			/etc/cron.d/

		ANACRON JOBS:
			/etc/cron.{hourly,daily,weekly,monthly}/
            
Chap 3
======
	rsyslog
	=======
		PACKAGE: rsyslog
		SERVICE: rsyslog

		CONFIG:
			/etc/rsyslog.conf
			/etc/rsyslog.d/*.conf

	journald
	========
		SERVICE: systemd-journald

		CONFIG:
			/etc/systemd/journald.conf

		PERSISTENT DIR:
			/var/log/journal

	NTP
	===
		timedatectl list-timezone
		timedatectl set-timezone <TZ>
		timedatectl set-ntp on|off

		SERVICE: chronyd

		CONFIG:
			/etc/chrony.conf
Chap 4
======
	Archiving and Transferring Files
	================================
	tar {[-]c|t|x} [-v{z|j|J}] {-f <ARCHIVE>.tar[.gz|.bz2|.xz]} [-C <PATH>] [<PATH>...]
	Where,
		-c create
		-t table of contents(view)
		-x extract

		-v verbose

		-z gzip compression
		-j bzip2 compression
		-J xz compression

		-f <ARCHIVE>  archive file to use

		-C <PATH>  only works with -x option in extraction. it extracts to the destination PATH

	scp [-rp] <SRC>... <DEST>
	rsync [-a] [-v] [--progress] <SRC>... <DEST>
	Where,
		-a archive
		-r recursive
		-p preserve perm
		-v verbose
		--progress show progress of files syncing

		<SRC> = <DEST> = [[<USER>@]<HOSTNAME>:]<PATH>
	eg.
		scp file1 user2@server3:/tmp/file5
		scp user1@server1:file1 user2@server2:.
		rsync -av --progress user3@server3:/etc/passwd .

	On servera as root user:
		mkdir /opt/proj
		cp /etc/passwd /opt/proj
		echo hi > /opt/proj/greetings
		chown student /opt/proj/greetings
		chmod 600 /opt/proj/greetings

		tar cvzf backup.tar.gz /opt/proj /etc/group
		tar tvzf backup.tar.gz
		pwd
		mkdir restore
		tar xvzf backup.tar.gz -C restore
		ls -lR restore

		ls
		scp backup.tar.gz student@serverb:.
		scp -rp /opt/proj root@serverb:/opt
		scp -rp /opt/proj root@serverb:/opt
		scp -rp /opt/proj root@serverb:/opt
		rsync -av --progress /etc/passwd root@serverb:/opt
		rsync -av --progress /etc/passwd root@serverb:/opt
		rsync -av --progress /etc/passwd root@serverb:/opt

		ssh root@serverb ls -lR /opt /home/student

		ssh root@serverb "rm -rf /opt/*"
		time rsync -av --progress /etc/passwd root@serverb:/opt
		time rsync -av --progress /etc/passwd root@serverb:/opt
		time rsync -av --progress /etc/passwd root@serverb:/opt

Chap 5
======
	Tuned
	=====
		PACKAGE: tuned
		SERVICE: tuned
		
		tuned-adm list|profile|recommend|active|off
		
	Nice
	====
		nice -n NICE_VALUE CMD
		renice -n NICE_VALUE -p PID
		
		ps -eo pid,ppid,ni,cls,psr,cmd

Chap 6
======
	SELINUX
	=======
		It's built into the RH kernel. Can be turned on/off by setting selinux=0|1 kernel bootup param.
		
		3 Modes of operation:
			Disabled    - selinux=0              - no enforcement, no log
			Enforcing   - selinux=1,enforcing=1  - enforce policy, and log 
			Permissive  - selinux=1,enforcing=0  - no enforcement, and log
			
		getenforce
		setenforce 0|1
		sestatus

		/etc/selinux/config			# to set default mode

		ps -Z
		ls -Z

		Traditional *nix (linux,unix) permission = Discretionary Access Control (DAC)
		SELinux = Mandatory Access Control (MAC)

		context:	user_u:role_r:type_t

		PACKAGE DOCUMENTATION: selinux-policy-doc     # man -k _selinux
		semanage fcontext -l
		semanage fcontext -a -t <CONTEXT_T> '<RE>'
		semanage boolean -l
		semanage port -l
		semanage port -a -t <port_label> -p tcp|udp <PORTNUMBER>


		grep avc /var/log/audit/audit.log

		getsebool -l
		setsebool [-P] <PARAM>=1|0 

		restorecon -RF <PATH>
		chcon [-R] -t <TYPE> <PATH>


		Context -> user_u:role_r:type_t
			zacc_u:participant_r:class_usage_t
			kelvin_u:instructor_r:class_admin_t
			panasonic_u:presenting_r:class_presentation_t

		RULE
			fcontext
			port
			boolean
				can class_admin do presentation = TRUE
				can class_admin do everything = TRUE
				can class_usage access presentation device = FALSE


Chap 7
======

	PARTITIONING
	============
		A Block Device (BD) can be a whole disk, partition, RAID dev, SAN, CDROM/DVD, floppy, logical volume, file, etc.

		You can format a BD with a filesystem in order to use it. A filesystem (FS) example, VxFS, NTFS, FAT32, ext2/3/4, xfs, btrfs, ISO9660.

		To use the FS, you need to mount the FS onto a mount point(directory).

		RHEL8/9
			udevadm settle   - run this cmd after partitioning
			systemctl daemon-reload		- run this cmd after editing /etc/fstab

		RHEL5
			after partitioning just run "partprobe"
		RHEL6
			after partitioning on a device that is currently being accessed, REBOOT!!!!
			after partitioning on a device that is not being accessed, partprobe
		RHEL7
			after partitioning just run "partprobe"


		Device Naming Convention

			IDE				- /dev/hd{a..h}[#]	eg. /dev/hda, /dev/hdb2
			SCSI/SATA/USB	- /dev/sd{a...}[#]	eg. /dev/sda, /dev/sdb, /dev/sdc5
			HP Smart Array	- /dev/cciss/c#t#d#	eg. /dev/cciss/c0t0d1
			Virtual Disk	- /dev/vd{a...}[#]
			XEN Virt Disk	- /dev/xvd{a...}[#]
			Software RAID	- /dev/md#		eg. /dev/md0, /dev/md1p2, /dev/md127


		lsblk - list block devices
		df -hT - show mounted filesystems

		lsof|grep vdb

		cat /proc/partitions	- list what partitions and devices the kernel see

		mkfs.<FSTYPE>  <DEVICE>	    - format FS
		mkswap <DEVICE>
			mkfs.ext4 /dev/vda2
			mkfs.xfs /dev/sda3
			mkfs.vfat /dev/vda3
			mkswap /dev/vdb2

		vi /etc/fstab
			#<FS-DEVICE>  <MNT_PT>   <FSTYPE>  <FSOPTS>  <DUMP> <FSCK>
			/dev/sda1  /opt/share   ext4    defaults,ro  1     2
			/dev/sdb   swap         swap    defaults,pri=0     0     0

		any changes to /etc/fstab, run the systemctl daemon-reload


		mount [-t <FSTYPE>] [-o <FSOPTS>] [<FS-DEVICE>] [<MNT_PT>]
		mount -v

		free
		swapon -s	# display summary of swap fs in use
		swapon <DEVICE>		# use swap fs
		swapoff <DEVICE>	# turn off swap device


Chap 8
======
	Logical Volume Manager (LVM)
	============================
		pvcreate  <DEVICE>...
		pvdisplay <DEVICE>...
		pvmove <PV>
		pvremove <DEVICE>...

		vgscan
		vgcreate <VG_NAME> <PV>...
		vgdisplay [-v] <VG_NAME>
		vgextend <VG_NAME> <PV>...
		vgreduce <VG_NAME> <PV>...
		vgremove <VG_NAME>

		lvcreate -n <LV_NAME> -L <SIZE>M|G <VG_NAME>
		lvdisplay /dev/<VG_NAME>/<LV_NAME>
		lvextend [-r] -L [+|-]<SIZE>M|G /dev/<VG_NAME>/<LV_NAME>
		lvreduce [-r] -L [+|-]<SIZE>M|G /dev/<VG_NAME>/<LV_NAME>
		lvremove <LV_NAME>


		mkfs.<FSTYPE> /dev/<VG_NAME>/<LV_NAME>
		mkfs.<FSTYPE> /dev/mapper/<VG_NAME>-<LV_NAME>

		ext3/4 - can extend live, can only shrink offline
		xfs    - can extend live, no such thing as reduce


	Stratis
	=======
		yum install -y stratisd stratis-cli
		systemctl enable --now stratisd		# this enables and starts the service
		systemctl status stratisd		# check the service

		stratis pool|blockdev|filesystem list [<OBJECT_NAME>]
		stratis pool create <POOL> <BD>...
		stratis filesystem create <POOL> <FS>
		stratis filesystem snapshot <POOL> <FS> <SNAP>

		/etc/fstab
			/stratis/<POOL>/<FS>  <MNT_PT>  xfs  defaults,x-systemd.requires=stratisd.service  0  0

		DO NOT FORMAT <FS>. STRATIS WILL HANDLE THE FILESYSTEM FOR YOU.

	VDO
	===
		yum install -y vdo kmod-kvdo

		vdo create --name=<VDO> --device=<BD> [--vdoLogicalSize=<VOLUME_SIZE>]

		vdo status --name=<VDO>
		vdostats [--human-readable]

		vdo list|start|stop


Chap 9
======
	NFS Client
	==========
		mount [-t nfs] [-o <NFS_OPTS>] <SERVER>:<SHARE> <MNT_PT>
			mount -t nfs -o ro,soft servera:/sharename /opt/projX

		showmount -e <NFS_SERVER>

	Automount
	=========
		SERVICE: autofs
		PACKAGES: autofs nfs-utils
		
		mount serverX:/sharename  /mybase/mymount
			  <SERVER>  <SHARE>   <BASE>/<MNT_PT>
		where,
			<SERVER> = serverX
			<SHARE>  = /sharename
			<BASE>	 = /mybase
			<MNT_PT> = mymount

		Below are samples of the following mount command performed using autofs direct and indirect maps:
			mount serverX:/sharename/mymount /mybase/mymount
			mount serverX:/sharename/yourmnt /mybase/yourmnt
			mount serverX:/sharename/his_mnt /mybase/his_mnt
		
		/etc/auto.master.d/<SHARENAME>.autofs:
			#<BASE>		/etc/auto.<SHARENAME>		# indirect map
			/mybase		/etc/auto.myconfig

			#/-		/etc/auto.<SHARENAME>		# direct map
			/-		/etc/auto.mydirect

		/etc/auto.myconfig:
			#<MNT_PT>	-ro,async	<SERVER>:<SHARE>         # indirect map
			mymount		-rw,sync	serverX:/sharename/mymount
			yourmnt		-rw,sync	serverX:/sharename/yourmnt
			his_mnt		-rw,sync	serverX:/sharename/his_mnt
			#shortcut instead of the 3 lines above
			*		-rw,sync	serverX:/sharename/&

		/etc/auto.mydirect
			#<BASE>/<MNT_PT>  -rw,sync	<SERVER>:<SHARE>	# direct map
			/mybase/mymount	  -rw,sync	serverX:/sharename/mymount
			/mybase/yourmnt   -rw,sync  serverX:/sharename/yourmnt
			/mybase/his_mnt   -rw,sync  serverX:/sharename/his_mnt

Kickstart
=========
	Filename for kickstart file (default) => ks.cfg

	inst.ks=floppy
	inst.ks=nfs:<SERVER>:/<SHARE>/<FILE>
	inst.ks=cdrom					# name the file as ks.cfg at base of cd 
	inst.ks=hd:<FS-DEVICE>:/<DIR>/<FILE>
		inst.ks=hd:sdb3:/backup/server.cfg
	inst.ks=<URI> 					# <URI> = http://.... OR ftp://....
